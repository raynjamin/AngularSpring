package com.theironyard.charlotte;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.theironyard.charlotte.entities.User;
import com.theironyard.charlotte.services.UserRepository;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@RunWith(SpringRunner.class)
@SpringBootTest
public class AngularSpringApplicationTests {
	// we're going to be managing users in this test, so
	// we need a UserRepository
	@Autowired
	UserRepository users;


	// when we start our web app, a Web Application Context
	// is generated by default. We're autowiring one in our
	// tests, which basically says to create a fake
	// web server for us to "query"
	@Autowired
	WebApplicationContext wap;


	// MockMvc gives us the ability to, in our tests, visit
	// the urls that we have setup in our web application.
	MockMvc mockMvc;

	@Before
	public void before() {
		// we're going to use our web application context to
		// build our mockmvc object.
		mockMvc = MockMvcBuilders.webAppContextSetup(wap).build();
	}

	@Test
	public void addUser() throws Exception {
		User user = new User();
		user.setUsername("Alice");
		user.setAddress("17 Princess St");
		user.setEmail("alice@gmail.com");

		// ObjectMapper is Spring's class for
		// json serialization and deserialization.
		// we're going to use it to convert our user to
		// a json string
		// this is a library called Jackson.
		ObjectMapper mapper = new ObjectMapper();

		String json = mapper.writeValueAsString(user);

		mockMvc.perform(
				MockMvcRequestBuilders.post("/user")
						.content(json)
						.contentType("application/json")
		);

		Assert.assertTrue(users.count() == 1);
	}

	@Test
	public void deleteUser() throws Exception {
		mockMvc.perform(
				MockMvcRequestBuilders.delete("/user/1")
		);

		Assert.assertTrue(users.count() == 0);
	}

}
